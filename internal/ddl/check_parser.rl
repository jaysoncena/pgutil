package ddl

// Code generated by ragel; DO NOT EDIT.

%%{
	machine check;
	write data;
}%%

func ParseCheck(data string) (*Check, error) {
	check := &Check{}

	var mark1, mark2 int

	cs, eof := 0, len(data);
	p, pe := 0, eof;
	%%{

	action setMark1 {
		mark1 = fpc
	}
	action setMark2 {
		mark2 = fpc
	}

	action matchDeferrable        { check.Deferrable = true }
	action matchInitiallyDeferred { check.InitiallyDeferred = true }

	ws = space+;

	main := space*
		'CHECK'i space* '(' % setMark1
		  any**
		')' @ setMark2
		( ws ( 'NOT'i ws 'DEFERRABLE'i )
		| ws ( 'DEFERRABLE'i ws @ matchDeferrable )?
		  ( 'INITIALLY'i ws 'IMMEDIATE'i
		  | 'INITIALLY'i ws 'DEFERRED'i @ matchInitiallyDeferred
		  )?
		)?
		space*;

	write init;
	write exec;
	}%%

	if cs < check_first_final {
		return nil, &parseError{
		    cs: cs,
		    data: data,
		}
	}

	check.Expression = data[mark1:mark2]

	return check, nil
}
